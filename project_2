
Created on Sun May 12 21:58:17 2019

@author: root
"""

from scapy.all import *
import numpy as np
import pandas as pd
from matplotlib.pyplot import hist
import sys
import cv2
import socket
import re
import zlib
import os
import struct
import cv2
from ctypes import *
#%% Nicholas Lopez BFOR 203 Project (Part 2 of 2)
#assigns directories to variables
pic_dir="vm_share/pictures"
face_dir="vm_share/faces"
pcap_file="vm_share/images5.pcap"
#%%
#searches headers for HTTP headers
def get_http_headers(http_payload):
    try:
        headers_raw = http_payload[:http_payload.index("\r\n\r\n")+2]
        headers = dict(re.findall(r"('?P<name>.*?'): (?P<value>.*?)\r\n", headers_raw))
    except:
        return None
    if "Content-Type" not in headers:
        return None
    
    return headers
#%%
def extract_image(Headers, http_payload):
    image = None
    image_type = None
    
    try:
       if "image" in headers ['Content-Type']:
           image_type = headers['Content-Type'].split("/")[1]
           
           image = http_payload[http_payload.index("\r\n\r\n")+4:]
           
           try:
               if "Content-Encoding" in headers.keys():
                   if headers['Content Encoding'] == "gzip":
                       image = zlib.decompress(image, 16+zlib.MAX_WBITS)
                   elif headers['Content-Encoding']=="deflate":
                       image = zlib.decompress(image)
           except:
               pass
        
    except:
        return None,None
    return image,image_type
#%%
def face_detect(path, file_name):
    img = cv2.imread(path)
    cascade = cv2.CascadeClassifier("haarcascade_frontalface_alt.xml")
    rects = cascade.detectMultiScale(img,1.3,4, cv2.cv.CV_HAAR_SCALE_IMAGE,(20,20))
    
    if len(rects) == 0:
        return False
    rects[:, 2:] += rects[:, :2]

#highlights faces
    for x1,y1,x2,y2 in rects:
        cv2.rectangle(img, (x1,y1),(x2,y2)(127,255,0),2)
        cv2.imwrite("%s/%s-%s" % (face_dir, pcap_file,file_name),img)
    
        return True
#%%
def http_assembler(pcap_file):
    carved_images = 0
    faces_detected = 0
    a = rdpcap(pcap_file)
    
    sessions = a.sessions()
    for session in sessions:
        http_payload = ""
        for packet in sessions[session]:
            try:
                if packet['TCP'].dport == 80 or packet['TCP'].sport == 80:
                    
                    #rebuilds stream
                    http_payload += str(packet['TCP'].payload)
            except IndexError:
                pass
            except Exception as e:
                print(e)
                raise
                
            headers = get_http_headers(http_payload)
            if headers is None:
                    continue
    image, image_type =extract_image(headers,http_payload)
    
    if image is not None and image_type is not None:
        #save the image
        file_name="%s-pic_carver_%d.%s" (pcap_file, carved_images, image_type)
        fd = open("%s/%s" %(pic_dir,file_name),"wb")
        
        fd.write(image)
        fd.close()
        
        carved_images += 1
        
        try:
            result = face_detect("%s/%s" % (pic_dir, file_name), file_name)
            
            if result in True:
                faces_detected += 1
        except Exception as e:
            print(e)
    return carved_images, faces_detected
carved_images, faces_detected= http_assembler(pcap_file)
print("Extracted:%d images" % carved_images)
print("Detected: % faces" % faces_detected)

#%%
                
    

    
           
           
          


                        
